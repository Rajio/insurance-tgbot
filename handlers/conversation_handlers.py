from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from typing import Optional, Dict
import uuid
from datetime import datetime
from config.constants import *
from services.mindee_service import MindeePassportAPI, MindeeVehicleAPI
from services.groq_service import GroqService
from utils.file_utils import ensure_directories_exist, save_mindee_response, generate_policy_filename
from utils.logging_utils import logger
import os

mindee_passport_api = MindeePassportAPI()
mindee_vehicle_api = MindeeVehicleAPI()
groq_service = GroqService()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask for passport photo"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –Ω–∞ –≤–∞—à—É –∞–≤—Ç—ñ–≤–∫—É. "
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö."
    )
    return AWAITING_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle passport photo upload"""
    try:
        photo_file = await update.message.photo[-1].get_file()
        img_path = f"downloads/passport_{uuid.uuid4().hex}.jpg"
        await photo_file.download_to_drive(img_path)
        await update.message.reply_text("üîç –†–æ–∑–ø—ñ–∑–Ω–∞—é –¥–∞–Ω—ñ –∑ —Ñ–æ—Ç–æ...")

        job_id = mindee_passport_api.upload_document(img_path)
        if not job_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return await suggest_manual_input(update.message)

        mindee_response = mindee_passport_api.get_result(job_id)
        if not mindee_response:
            await update.message.reply_text("‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
            return await suggest_manual_input(update.message)

        save_mindee_response(job_id, mindee_response)
        passport_data = mindee_passport_api.extract_passport_data(mindee_response)
        
        if not passport_data:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –¥–æ–∫—É–º–µ–Ω—Ç—É.")
            return await suggest_manual_input(update.message)

        context.user_data['passport_data'] = passport_data
        return await show_data_for_confirmation(update.message, passport_data)

    except Exception as e:
        logger.error(f"Error in handle_photo: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return AWAITING_PHOTO

async def suggest_manual_input(message) -> int:
    """Suggest user to enter passport data manually"""
    instructions = (
        "üìù –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "–ü—Ä—ñ–∑–≤–∏—â–µ\n"
        "–Ü–º'—è\n"
        "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "–ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ\n"
        "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î)\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥:\n"
        "–Ü–≤–∞–Ω–æ–≤\n"
        "–Ü–≤–∞–Ω\n"
        "–ö–ú123456\n"
        "–£–∫—Ä–∞—ó–Ω–∞\n"
        "1990-05-15"
    )
    await message.reply_text(instructions)
    return AWAITING_MANUAL_DATA

async def show_data_for_confirmation(message, data: dict) -> int:
    """Show extracted data to user for confirmation"""
    msg = (
        "üìã –í–∏—è–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:\n"
        f"‚ñ™ –ü—Ä—ñ–∑–≤–∏—â–µ: {data['surname']}\n"
        f"‚ñ™ –Ü–º'—è: {data['given_name']}\n"
        f"‚ñ™ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {data['passport_number']}\n"
        f"‚ñ™ –ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ: {data['nationality']}\n"
        f"‚ñ™ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['birth_date']}\n\n"
        "–¶—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤—Å–µ –≤—ñ—Ä–Ω–æ", callback_data="confirm")],
        [InlineKeyboardButton("‚úè –ù—ñ, —Ö–æ—á—É –≤–∏–ø—Ä–∞–≤–∏—Ç–∏", callback_data="edit")]
    ]
    await message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_CONFIRM

async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚úÖ –î–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (–¥–µ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó):"
    )
    return AWAITING_TECH_PASSPORT_1

async def edit_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úè –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤—Ä—É—á–Ω—É:")
    return await suggest_manual_input(query.message)

async def handle_manual_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        parts = [line.strip() for line in update.message.text.split('\n') if line.strip()]
        if len(parts) != 5:
            raise ValueError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä—ñ–≤–Ω–æ 5 —Ä—è–¥–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞")
            
        context.user_data['passport_data'] = {
            'surname': parts[0],
            'given_name': parts[1],
            'passport_number': parts[2],
            'nationality': parts[3],
            'birth_date': parts[4],
            'tech_passport': None
        }
        
        await update.message.reply_text(
            "‚úÖ –î–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (–¥–µ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó):"
        )
        return AWAITING_TECH_PASSPORT_1
        
    except Exception as e:
        logger.error(f"Error in handle_manual_data: {e}")
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return AWAITING_MANUAL_DATA

async def handle_tech_passport_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        photo_file = await update.message.photo[-1].get_file()
        img_path = f"downloads/tech_passport_1_{uuid.uuid4().hex}.jpg"
        await photo_file.download_to_drive(img_path)
        
        await update.message.reply_text("üîç –û–±—Ä–æ–±–ª—è—é –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞...")
        
        job_id = mindee_vehicle_api.upload_document(img_path)
        if not job_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return AWAITING_TECH_PASSPORT_1

        mindee_response = mindee_vehicle_api.get_result(job_id)
        if not mindee_response:
            await update.message.reply_text("‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
            return await suggest_manual_vehicle_input(update.message)

        vehicle_data = mindee_vehicle_api.extract_vehicle_data(mindee_response)
        
        if not vehicle_data:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
            return await suggest_manual_vehicle_input(update.message)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑ –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        context.user_data['vehicle_data'] = vehicle_data
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –¥—Ä—É–≥—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        await update.message.reply_text(
            "‚úÖ –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (–¥–µ –≤–∫–∞–∑–∞–Ω—ñ –º–∞—Ä–∫–∞ —Ç–∞ VIN):"
        )
        return AWAITING_TECH_PASSPORT_2
        
    except Exception as e:
        logger.error(f"Error in handle_tech_passport_1: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return AWAITING_TECH_PASSPORT_1

async def handle_tech_passport_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        photo_file = await update.message.photo[-1].get_file()
        img_path = f"downloads/tech_passport_2_{uuid.uuid4().hex}.jpg"
        await photo_file.download_to_drive(img_path)
        
        await update.message.reply_text("üîç –û–±—Ä–æ–±–ª—è—é –¥—Ä—É–≥—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞...")
        
        job_id = mindee_vehicle_api.upload_document(img_path)
        if not job_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return AWAITING_TECH_PASSPORT_2

        mindee_response = mindee_vehicle_api.get_result(job_id)
        if not mindee_response:
            await update.message.reply_text("‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.")
            return await suggest_manual_vehicle_input(update.message)

        additional_data = mindee_vehicle_api.extract_vehicle_data(mindee_response)
        
        if not additional_data:
            await update.message.reply_text("‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
            return await suggest_manual_vehicle_input(update.message)

        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        vehicle_data = context.user_data.get('vehicle_data', {})
        vehicle_data.update(additional_data)
        context.user_data['vehicle_data'] = vehicle_data
        
        # –Ø–∫—â–æ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –≤–ª–∞—Å–Ω–∏–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø–∞—Å–ø–æ—Ä—Ç–∞
        if not vehicle_data.get('owner_name'):
            passport_data = context.user_data.get('passport_data', {})
            owner_name = f"{passport_data.get('given_name', '')} {passport_data.get('surname', '')}".strip()
            if owner_name:
                vehicle_data['owner_name'] = owner_name
        
        return await show_vehicle_data_for_confirmation(update.message, vehicle_data)
        
    except Exception as e:
        logger.error(f"Error in handle_tech_passport_2: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return AWAITING_TECH_PASSPORT_2

async def suggest_manual_vehicle_input(message) -> int:
    """Suggest user to enter vehicle data manually"""
    instructions = (
        "üìù –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:\n\n"
        "–ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó\n"
        "–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–†–†–†–†-–ú–ú-–î–î)\n"
        "VIN –Ω–æ–º–µ—Ä\n"
        "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥:\n"
        "–ê–ê1234–í–í\n"
        "2020-01-15\n"
        "JT2BF22K3W0123456\n"
        "Toyota Camry"
    )
    await message.reply_text(instructions)
    return AWAITING_MANUAL_VEHICLE_DATA

async def handle_manual_vehicle_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        parts = [line.strip() for line in update.message.text.split('\n') if line.strip()]
        if len(parts) != 4:
            raise ValueError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä—ñ–≤–Ω–æ 4 —Ä—è–¥–∫–∏ –∑ –¥–∞–Ω–∏–º–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞")
            
        context.user_data['vehicle_data'] = {
            'vehicle_registration_number': parts[0],
            'registration_date': parts[1],
            'vehicle_identification_number': parts[2],
            'make': parts[3],
            'owner_name': context.user_data['passport_data'].get('given_name', '') + ' ' + 
                         context.user_data['passport_data'].get('surname', ''),
            'insurance_details': []
        }
        
        return await show_vehicle_data_for_confirmation(update.message, context.user_data['vehicle_data'])
        
    except Exception as e:
        logger.error(f"Error in handle_manual_vehicle_data: {e}")
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
        return AWAITING_MANUAL_VEHICLE_DATA

async def show_vehicle_data_for_confirmation(message, data: dict) -> int:
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    data.setdefault('vehicle_registration_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    data.setdefault('registration_date', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    data.setdefault('owner_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    data.setdefault('vehicle_identification_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    data.setdefault('make', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
    
    msg = (
        "üìã –í–∏—è–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞:\n"
        f"‚ñ™ –ù–æ–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {data['vehicle_registration_number']}\n"
        f"‚ñ™ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {data['registration_date']}\n"
        f"‚ñ™ –í–ª–∞—Å–Ω–∏–∫: {data['owner_name']}\n"
        f"‚ñ™ VIN: {data['vehicle_identification_number']}\n"
        f"‚ñ™ –ú–∞—Ä–∫–∞: {data['make']}\n\n"
        "–¶—ñ –¥–∞–Ω—ñ –≤—ñ—Ä–Ω—ñ?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤—Å–µ –≤—ñ—Ä–Ω–æ", callback_data="confirm_vehicle")],
        [InlineKeyboardButton("‚úè –ù—ñ, —Ö–æ—á—É –≤–∏–ø—Ä–∞–≤–∏—Ç–∏", callback_data="edit_vehicle")]
    ]
    await message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_VEHICLE_CONFIRM

async def confirm_vehicle_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ passport_data
    vehicle_data = context.user_data.get('vehicle_data', {})
    context.user_data['passport_data']['tech_passport'] = vehicle_data.get('vehicle_registration_number', '')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –µ—Ç–∞–ø—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É–≥–æ–¥–∏
    return await show_agreement(query.message, context.user_data)

async def edit_vehicle_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úè –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –≤—Ä—É—á–Ω—É:")
    return AWAITING_MANUAL_VEHICLE_DATA

async def show_agreement(message, data: dict) -> int:
    vehicle_data = data.get('vehicle_data', {})
    
    msg = (
        "üìù –£–º–æ–≤–∏ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:\n\n"
        f"üöó –î–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:\n"
        f"- –ù–æ–º–µ—Ä: {vehicle_data.get('vehicle_registration_number', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"- –ú–∞—Ä–∫–∞: {vehicle_data.get('make', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
        f"- VIN: {vehicle_data.get('vehicle_identification_number', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
        "üí≥ –£–º–æ–≤–∏ —Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è:\n"
        "1. –í–∞—Ä—Ç—ñ—Å—Ç—å: 100 USD –Ω–∞ —Ä—ñ–∫\n"
        "2. –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó: 1 —Ä—ñ–∫\n"
        "3. –ü–æ–∫—Ä–∏—Ç—Ç—è: –±–∞–∑–æ–≤–µ\n\n"
        "–í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ —É–º–æ–≤–∞–º–∏?"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –ø–æ–≥–æ–¥–∂—É—é—Å—å", callback_data="agree")],
        [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="decline")]
    ]
    await message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
    return AWAITING_AGREEMENT

async def handle_agreement(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "decline":
        await query.edit_message_text("–î–æ–±—Ä–µ, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äî —è —Ç—É—Ç!")
        return ConversationHandler.END

    elif query.data == "agree":
        await query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å...")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–ª—ñ—Å–∞
        policy_text = await groq_service.generate_insurance_policy(context.user_data)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ TXT —Ñ–∞–π–ª
        passport_data = context.user_data.get('passport_data', {})
        txt_path = generate_policy_filename(passport_data)
        
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(policy_text)

        await query.edit_message_text("‚úÖ –í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ:")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ TXT —Ñ–∞–π–ª
        with open(txt_path, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=f,
                filename=f"–°—Ç—Ä–∞—Ö–æ–≤–∏–π_–ø–æ–ª—ñ—Å_{passport_data.get('given_name', '')}_{passport_data.get('surname', '')}.txt",
                caption="–í–∞—à —Å—Ç—Ä–∞—Ö–æ–≤–∏–π –ø–æ–ª—ñ—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ TXT"
            )
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        os.remove(txt_path)
        
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –≤–≤–µ–¥—ñ—Ç—å /start")
    return ConversationHandler.END

def get_conversation_handler():
    """Create and return the main conversation handler"""
    return ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AWAITING_PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_CONFIRM: [
                CallbackQueryHandler(confirm_data, pattern='^confirm$'),
                CallbackQueryHandler(edit_data, pattern='^edit$'),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_MANUAL_DATA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_data),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_TECH_PASSPORT_1: [
                MessageHandler(filters.PHOTO, handle_tech_passport_1),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_TECH_PASSPORT_2: [
                MessageHandler(filters.PHOTO, handle_tech_passport_2),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_MANUAL_VEHICLE_DATA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_vehicle_data),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_VEHICLE_CONFIRM: [
                CallbackQueryHandler(confirm_vehicle_data, pattern='^confirm_vehicle$'),
                CallbackQueryHandler(edit_vehicle_data, pattern='^edit_vehicle$'),
                CommandHandler('cancel', cancel)
            ],
            AWAITING_AGREEMENT: [
                CallbackQueryHandler(handle_agreement, pattern='^(agree|decline)$'),
                CommandHandler('cancel', cancel)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )